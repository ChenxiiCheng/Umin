{"version":3,"sources":["ColorModeSwitcher.tsx","components/Header.tsx","components/Menu.tsx","components/Content.tsx","App.tsx","serviceWorker.ts","reportWebVitals.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","navigationLinks","id","name","Header","navigationBarBg","navigationBarColor","navigationBarBorderBottom","borderBottom","fontWeight","bg","data-testid","d","justifyContent","flexWrap","minW","maxW","w","mx","px","py","position","spacing","map","link","href","url","isExternal","_hover","textColor","cursor","leftIcon","colorScheme","stroke","boxSize","src","alt","right","top","transition","menuList","key","VectorIcon","iconName","MenuListSection","section","item","index","MenuItem","useContext","MenuListContext","colorMode","clickedItem","setClickedItem","as","alignItems","p","mt","borderRadius","bgColor","outline","createContext","Menu","useState","menuTreeNodes","setMenuTreeNodes","useEffect","menuTree","length","renderMenuList","menuListData","sectionKey","Provider","value","Content","boxShadow","App","globalBgColor","globalColor","theme","textAlign","templateColumns","gap","minH","colSpan","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77dd7bca.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/core\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher = (props: ColorModeSwitcherProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"sm\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React from 'react'\nimport { Text, Link, Button, HStack, Box, Avatar, AvatarBadge, Image, useColorModeValue } from '@chakra-ui/core'\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\"\nimport { MdBookmarkBorder, MdControlPoint } from 'react-icons/md'\nimport { BsClipboardData, BsBell } from 'react-icons/bs'\n\nconst navigationLinks = [\n  {id: 1, name: '探索', 'url': 'https://www.chenxii.xyz'},\n  {id: 2, name: '题库', 'url': 'https://www.chenxii.xyz'},\n  {id: 3, name: '讨论', 'url': 'https://www.chenxii.xyz'},\n  {id: 4, name: '竞赛', 'url': 'https://www.chenxii.xyz'},\n  {id: 5, name: '企业', 'url': 'https://www.chenxii.xyz'},\n]\n\nconst newFeatureLinkImage = \"https://assets.leetcode-cn.com/support/new.svg\"\n\nexport const Header = () => {\n  const navigationBarBg = useColorModeValue(\"white\", \"#1A202C\")\n  const navigationBarColor = useColorModeValue(\"rgba(38, 38, 38, 1)\", \"white\")\n  const navigationBarBorderBottom = useColorModeValue(\"rgba(240, 240, 240, 1)\", \"#2D3748\")\n\n  return (\n    <Box\n      borderBottom={`1px solid ${navigationBarBorderBottom}`}\n      fontSize=\"sm\"\n      fontWeight=\"450\"\n      color={navigationBarColor}\n      bg={navigationBarBg}\n      data-testid=\"navigationBar\">\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        flexWrap=\"nowrap\"\n        minW=\"992px\"\n        maxW=\"1200px\"\n        w=\"100%\"\n        mx=\"auto\"\n        px=\"20px\"\n        py=\"6px\"\n        position=\"relative\">\n        <HStack spacing=\"30px\" data-testid=\"links\">\n          {navigationLinks.map(link => (\n            <Link key={link.id} href={link.url} isExternal _hover={{textColor: 'rgba(34, 34, 34, 1)', fontWeight: 400}}>\n              <Text cursor=\"pointer\">{link.name}</Text>\n            </Link>\n          ))}\n        </HStack>\n        <HStack spacing=\"30px\">\n          <Button\n            size=\"sm\"\n            leftIcon={<MdBookmarkBorder />}\n            colorScheme=\"teal\"\n            variant=\"outline\"\n            cursor=\"pointer\"\n            data-testid=\"btn__download\"\n          >\n            下载App\n          </Button>\n          <Button\n            size=\"sm\"\n            leftIcon={<MdControlPoint />}\n            colorScheme=\"yellow\"\n            variant=\"outline\"\n            cursor=\"pointer\"\n            data-testid=\"btn__premium\"\n          >\n            Plus会员\n          </Button>\n          {/* FIXME: hover not working for the icon */}\n          <Box _hover={{color: \"blue\", stroke: 'blue'}}>\n            <BsClipboardData\n              size={18}\n              cursor=\"pointer\"\n              color=\"rgba(140, 140, 140, 1)\"\n              data-testid=\"icon__clipboard\"\n            />\n          </Box>\n          <Box _hover={{color: \"rgba(89, 89, 89, 1)\"}}>\n            <BsBell\n              size={18}\n              cursor=\"pointer\"\n              color=\"rgba(140, 140, 140, 1)\"\n              data-testid=\"icon__bell\"\n            />\n          </Box>\n          <Avatar size=\"xs\" cursor=\"pointer\" data-testid=\"avatar\">\n            <AvatarBadge boxSize=\"1em\" bg=\"green.500\" />\n          </Avatar>\n          <ColorModeSwitcher/>\n        </HStack> \n        <Image\n          src={newFeatureLinkImage}\n          alt=\"new feature\"\n          position=\"absolute\"\n          right=\"510px\"\n          top=\"-9px\"\n          cursor=\"pointer\"\n          transition=\"all 0.3s\"\n          _hover={{ top: \"-3px\" }}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import React, {useState, useEffect, useContext, createContext, Dispatch, SetStateAction} from 'react'\nimport { VStack, Box, HStack, useColorMode, Divider, ColorMode } from '@chakra-ui/core';\nimport {BsBarChart, BsTerminalFill, BsAward, BsCreditCard, BsClipboardData, BsPerson, BsShieldLock, BsBell, BsBootstrapReboot} from 'react-icons/bs'\n\ninterface IMenuItem {\n  key: string\n  name: string\n  icon: string\n}\n\ninterface IMenuItemProps {\n  item: IMenuItem\n}\n\ninterface IMenuListSection  {\n  section: IMenuItem[]\n}\n\ninterface IMenuContext {\n  colorMode: ColorMode\n  clickedItem: string\n  setClickedItem: Dispatch<SetStateAction<string>>\n}\n\n// * Mock menu list data\nconst menuList: IMenuItem[][] = [\n  [\n    {key: 'analysis', name: '做题分析', icon: 'BsBarChart'},\n    {key: 'progress', name: '进度管理', icon: 'BsTerminalFill'},\n  ],\n  [\n    {key: 'points', name: '积分', icon: 'BsAward'},\n    {key: 'coupon', name: '优惠券', icon: 'BsCreditCard'},\n    {key: 'order', name: '订单', icon: 'BsClipboardData'},\n  ],\n  [\n    {key: 'account', name: '个人资料', icon: 'BsPerson'},\n    {key: 'security', name: '账号安全', icon: 'BsShieldLock'},\n    {key: 'notification', name: '通知与隐私', icon: 'BsBell'},\n    {key: 'plan', name: '体验计划', icon: 'BsBootstrapReboot'},\n  ]\n]\n\nconst VectorIcon = (props: { iconName: string }): JSX.Element => {\n  switch (props.iconName) {\n    case 'BsBarChart': return <BsBarChart />\n    case 'BsTerminalFill': return <BsTerminalFill />\n    case 'BsAward': return <BsAward />\n    case 'BsCreditCard': return <BsCreditCard />\n    case 'BsClipboardData': return <BsClipboardData />\n    case 'BsPerson': return <BsPerson />\n    case 'BsShieldLock': return <BsShieldLock />\n    case 'BsBell': return <BsBell />\n    case 'BsBootstrapReboot': return <BsBootstrapReboot />\n    default: return <BsBarChart />\n  }\n}\n\nconst MenuListSection = (props: IMenuListSection) => {\n  const { section } = props;\n\n  return (\n    <>\n      {section && section.map((item, index) => (<MenuItem key={index} item={item} />))}\n      <Divider />\n    </>\n  )\n}\n\nconst MenuItem = (props: IMenuItemProps) => {\n  const { item } = props;\n  const {colorMode, clickedItem, setClickedItem} = useContext(MenuListContext)\n\n  return (\n    <Box\n      as=\"button\"\n      d=\"flex\"\n      justifyContent=\"flex-start\"\n      alignItems=\"center\"\n      p={4}\n      fontSize={16}\n      fontWeight={450}\n      mt={6}\n      w=\"100%\"\n      cursor=\"pointer\"\n      borderRadius=\"5px\"\n      _hover={{ color: \"rgba(45, 181, 93, 1)\", bgColor: colorMode === \"light\" ? \"rgba(0, 0, 0, 0.04)\" : \"rgba(255, 255, 255, 0.04)\" }}\n      bgColor={clickedItem === item.key ? colorMode === \"light\" ? \"rgba(0, 0, 0, 0.04)\" : \"rgba(255, 255, 255, 0.04)\" : \"\"}\n      color={clickedItem === item.key ? colorMode === \"light\" ? \"rgba(45, 181, 93, 1)\" : \"rgba(45, 181, 93, 1)\" : \"rgba(140, 140, 140, 1)\"}\n      outline=\"none\"\n      onClick={() => setClickedItem(item.key)}>\n      <HStack spacing={3}>\n        <VectorIcon iconName={item.icon} />\n        <Box as=\"span\">\n          {item.name}\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n\nconst MenuListContext = createContext({} as IMenuContext)\nexport const Menu = () => {\n  const { colorMode, toggleColorMode } = useColorMode()\n  const [clickedItem, setClickedItem] = useState<string>('')\n  const [menuTreeNodes, setMenuTreeNodes] = useState<JSX.Element[] | null>(null)\n\n  useEffect(() => {\n    const menuTree = menuList.length !== 0 ? renderMenuList(menuList) : null\n    setMenuTreeNodes(menuTree)\n  }, [])\n\n  const renderMenuList = (menuListData: IMenuItem[][]): JSX.Element[] => {\n    return menuListData.map((section, sectionKey) => (<MenuListSection key={sectionKey} section={section} />))\n  }\n\n  return (\n    <MenuListContext.Provider value={{colorMode, clickedItem, setClickedItem}}>\n      <VStack>\n        {menuTreeNodes}\n      </VStack>\n    </MenuListContext.Provider>\n  )\n}\n","import React from 'react'\nimport { Box, useColorMode } from '@chakra-ui/core';\n\nexport const Content = () => {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  return (\n    <Box\n      mt={6}\n      p={5}\n      bgColor={colorMode === \"light\" ? \"rgba(255, 255, 255, 1)\" : \"rgba(29, 37, 53, 1)\"}\n      color={colorMode === \"light\" ? \"#1A202C\" : \"rgba(219, 219, 219, 1)\"} fontSize=\"lg\"\n      fontWeight=\"450\"\n      boxShadow={colorMode === \"light\" ? \"0px 1px 5px rgba(0, 0, 0, 0.1)\" : \"0 1px 7px rgba(0, 0, 0, 0.3)\"}\n    >\n      hello\n       Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio commodi voluptate cumque, quod rerum quasi iure maxime eaque fuga voluptatibus voluptates voluptatum. Consequatur ab veritatis consectetur assumenda dignissimos in obcaecati ratione, pariatur quidem enim architecto, illo error itaque, at adipisci distinctio laboriosam impedit sed qui iure neque ipsa a! Fugiat enim, sunt odio mollitia veniam ipsum! Commodi, vel quae a nesciunt, quam temporibus possimus reprehenderit maiores veniam magni excepturi totam? Maxime minus sequi distinctio non consectetur earum harum exercitationem, nesciunt optio eaque unde? Reprehenderit esse architecto aut. Accusamus aspernatur esse nulla voluptatum dicta illo reprehenderit beatae voluptatem, sunt facilis dolore?\n    </Box>\n  )\n}\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  CSSReset,\n  Box,\n  Grid,\n  GridItem,\n  useColorModeValue\n} from \"@chakra-ui/core\"\nimport theme from \"@chakra-ui/theme\"\n\nimport { Header } from './components/Header';\nimport { Menu } from './components/Menu';\nimport { Content } from './components/Content';\n\nexport const App = () => {\n  const globalBgColor = useColorModeValue(\"white\", \"\")\n  const globalColor = useColorModeValue(\"rgba(138, 138, 138, 1)\", \"white\")\n\n  return (\n    <ChakraProvider theme={theme}>\n      <CSSReset />\n      <Box textAlign=\"center\" fontSize=\"md\" bgColor={globalBgColor} color={globalColor}>\n        <Header />\n        <Grid\n          templateColumns=\"repeat(4, 1fr)\"\n          gap={4}\n          minW=\"960px\"\n          maxW=\"1120px\"\n          w=\"100%\"\n          mx=\"auto\"\n          minH=\"800px\"\n        >\n          <GridItem colSpan={1}>\n            <Menu />\n          </GridItem>\n          <GridItem colSpan={3}>\n            <Content />\n          </GridItem>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}